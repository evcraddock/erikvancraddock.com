---
import type { CollectionEntry } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import { truncateString } from '../../utils';

interface Props {
  post: CollectionEntry<'article'>;
}

const { post } = Astro.props;
const heroImage = {
  location: '/missing.png',
  name: 'no image',
}

const article = post.data;
if (article && article.banner) {
  heroImage.location = article.banner
  heroImage.name = article.title
}

const mm = (article.date.getMonth() + 1).toLocaleString('en-US', {
  minimumIntegerDigits: 2,
  useGrouping: false,
});

const postLink = `/${article.date.getFullYear()}/${mm}/${post.slug}`;

---
<div class="flex lg:w-1/2 xl:w-1/3 flex-wrap group cursor-pointer p-1">
  <div class="w-full xl:p-2 md:p-0 mb-0 bg-slate-500">
    <a href={postLink}>
      <img
        alt="gallery"
        class="block lg:h-64 rounded-lg object-cover object-center mt-0 mb-3"
        src={heroImage.location} />
    </a>
    <a href={postLink} >
        <span class="inline-block text-md font-medium tracking-wider uppercase underline mt-0 text-slate-100">
          {truncateString(article.title, 28)}
        </span>
    </a>
    <div>
    <span class="flex items-center space-x-3">
      { article.categories && article.categories.map((cat: string) => {
        return (
        <a href={`/categories/${cat}/`}>
          <span class="inline-block text-xs font-medium tracking-wider uppercase mt-0 text-slate-100">
            {cat}
          </span>
        </a>
        )})
      }
    </span>
    <span class="mt-0 flex items-center space-x-3 text-slate-100">
      <span class="flex items-center gap-1 h-1">
        <span class="hidden xl:block truncate text-sm">Erik Craddock</span>
          <span>-</span>
        </span>
      <span>
        <FormattedDate date={article.date} />
      </span>
    </span>
    </div>
  </div>
</div>
